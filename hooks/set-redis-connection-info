#!/usr/bin/ruby

def gear_info(tokens, gear_id, &block)
  gears = {}
  if tokens.length == 1
    gears[gear_id] = tokens.first
  else
    puts tokens.inspect
    while not tokens.empty?
      gear, delim, data = tokens.shift(3)
      data = yield data if block_given?
      raise "Invalid data" unless delim == '='
      gears[gear] = data
      tokens.shift if tokens.first == ' '
    end
  end
  gears
end

def tokenize(s)
  tokens = []
  a = ""
  state = :start
  s.scan(/([ \t]+)|(\\')|(')|([^ \t']+)/) do |args|
    space, escaped_delim, delim, text = args
    case state
    when :start
      case
      when space then " "
      when escaped_delim then raise "Unexpected delimiter"
      when delim then state = :within_delim
      when text then tokens << text
      else raise "error"
      end
    when :within_delim
      case
      when space then a << space
      when escaped_delim then a << '"'
      when delim then tokens << a; a = ""; state = :start
      when text then a << text
      end
    end
  end
  tokens << a if a.length > 0
  tokens
end

gear_id = ARGV.shift
domain = ARGV.shift
tokens = tokenize(ARGV.shift)

# better if this is in creation order (oldest first)
gears = gear_info(tokens, gear_id) do |d| 
  d.split(' ').map{ |s| s.scan(/\A(.+?)=(.*?);?\Z/).first }.inject({}){ |h, (k,v)| h[k] = v if v != ''; h }
end
gears.each_pair{ |k,v| puts "Found gear #{k}#{k == gear_id ? '* ' : ''} with data #{v.inspect}" }
gear_ids = gears.keys.sort.uniq

master = (ENV['REDIS_CLUSTER_MASTER'] if gear_ids.include?(ENV['REDIS_CLUSTER_MASTER'])) || gear_ids.first
hosts = gears.map{ |k,v| "#{v['OPENSHIFT_REDIS_DB_HOST']}:#{v['OPENSHIFT_REDIS_DB_PORT']}" }.compact.uniq.sort
members = gears.map{ |k,v| "#{k}=#{v['OPENSHIFT_REDIS_DB_HOST']}:#{v['OPENSHIFT_REDIS_DB_PORT']}" }.compact.uniq.sort

# gears use the password of the preferred master in a scaled config
File.open('env/REDIS_PASSWORD', 'w'){ |f| f.puts gears[master]['OPENSHIFT_REDIS_DB_PASSWORD'] || ENV['REDIS_PASSWORD'] }
File.open('env/REDIS_CLUSTER_MASTER', 'w'){ |f| f.puts master }
File.open('env/REDIS_CLUSTER_MEMBERS', 'w'){ |f| f.puts members.join("\n") }
File.open('env/REDIS_CLUSTER', 'w'){ |f| f.puts hosts.join(",") }

